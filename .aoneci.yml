stage:
  integ-test(public):
    env:
      setting: {}
      load: init-env
    exec:
      - '#!/usr/bin/env bash'
      - ""
      - 'set -ae'
      - 'set -o pipefail'
      - ""
      - ""
      - 'export SOURCE_DIR=${source_root}'
      - 'export BRANCH=${branch}'
      - 'export REPO=${repo}'
      - ""
      - ""
      - 'cd ${SOURCE_DIR}'
      - ""
      - ""
      - ""
      - 'test_config_public="test_public.ini"'
      - ""
      - '# 公有云集成测试环境'
      - 'cat <<EOT >> ./tests/integration/${test_config_public}'
      - ""
      - '[client]'
      - '# 公有云 - mingshi_test'
      - 'access_key_id = AccessKeyId'
      - 'access_key_secret = 3AccessKeySecret'
      - 'region_id = cn-shanghai'
      - ""
      - '[odps]'
      - 'endpoint = http://service.cn-shanghai.maxcompute.aliyun.com/api'
      - 'logview_host = http://logview.odps.aliyun.com'
      - 'project = pai_sdk_test'
      - ""
      - ""
      - '[oss]'
      - 'bucket = pai-sdk-test'
      - 'endpoint = oss-cn-shanghai.aliyuncs.com'
      - 'rolearn = acs:ram::1557702098194904:role/aliyunodpspaidefaultrole'
      - ""
      - ""
      - EOT
      - ""
      - 'export TOX_PARALLEL_NO_SPINNER=1'
      - 'PAI_TEST_CONFIG=${test_config_public} tox -p all -e py2-public,py3-public -- -n 4 tests/integration'
  integ-test(inner):
    env:
      setting: {}
      load: init-env
    exec:
      - '#!/usr/bin/env bash'
      - ""
      - 'set -ae'
      - 'set -o pipefail'
      - ""
      - ""
      - 'export SOURCE_DIR=${source_root}'
      - 'export BRANCH=${branch}'
      - 'export REPO=${repo}'
      - ""
      - ""
      - 'cd ${SOURCE_DIR}'
      - ""
      - ""
      - 'test_config_inner="test_inner.ini"'
      - ""
      - '# 集团内集成测试配置'
      - 'cat <<EOT >> ./tests/integration/${test_config_inner}'
      - '# 集团内'
      - '# 弹内-lq262469'
      - '[client]'
      - 'access_key_id = AccessKeyId'
      - 'access_key_secret = AccessKeySecret'
      - 'region_id = center'
      - ""
      - '[odps]'
      - 'endpoint = http://service-corp.odps.aliyun-inc.com/api'
      - 'logview_host = http://logview.alibaba-inc.com'
      - 'project = pai_dev'
      - ""
      - ""
      - '[oss]'
      - 'bucket = pai-sdk-test'
      - 'endpoint = cn-shanghai.oss.aliyuncs.com'
      - 'rolearn = acs:ram::1557702098194904:role/lq-test-20200902'
      - ""
      - EOT
      - ""
      - 'export TOX_PARALLEL_NO_SPINNER=1'
      - 'PAI_TEST_CONFIG=${test_config_inner} tox -p all -e py2-inner,py3-inner -- -n 4 tests/integration'
  unit-test:
    env:
      setting: {}
      load: init-env
    type: unit_test
    exec:
      - '#!/usr/bin/env bash'
      - ""
      - 'set -ae'
      - 'set -o pipefail'
      - ""
      - ""
      - 'export SOURCE_DIR=${source_root}'
      - 'export BRANCH=${branch}'
      - 'export REPO=${repo}'
      - ""
      - 'export SOURCE_DIR=${source_root}'
      - 'echo "current ''SOURCE_DIR'' is ${SOURCE_DIR}"'
      - ""
      - ""
      - 'cd ${SOURCE_DIR}'
      - ""
      - 'export TOX_PARALLEL_NO_SPINNER=1'
      - 'tox -p all -e py2,py3 -- -n 4 tests/unit'
  init-env:
    env:
      setting: {}
      image: cise/cise_7u2
    plugin:
      -
        param:
          url: '${repo}'
          branch: '${branch}'
          path: '${source_root}'
          isDelGit: 'false'
        name: checkout
        pos: front
      -
        param:
          url: 'git@gitlab.alibaba-inc.com:pai-qualification/pqtools.git'
          branch: master
          path: '${source_root}/../pqtools'
          isDelGit: 'false'
        name: checkout
        pos: front
    exec:
      - '#!/usr/bin/env bash'
      - ""
      - 'set -ae'
      - 'set -o pipefail'
      - ""
      - ""
      - 'export SOURCE_DIR=${source_root}'
      - 'export BRANCH=${branch}'
      - 'export REPO=${repo}'
      - 'export REVISION=${revision}'
      - 'export BUILD_ID="${build_id}"'
      - 'export MR_ID="${mrId}"'
      - ""
      - 'echo "Initalize test enviroment, REPO=${REPO}, BRANCH=${BRANCH}, REVISION=${REVISION}, BUILD_ID=${BUILD_ID}, SOURCEDIR=${SOURCE_DIR} "'
      - ""
      - '# Test env initialize'
      - ""
      - '# install ossutil'
      - 'wget "http://gosspublic.alicdn.com/ossutil/1.6.19/ossutil64" -O "/usr/bin/ossutil" && chmod +x /usr/bin/ossutil'
      - ""
      - '# prepare Python test env'
      - 'yum install -y python3'
      - ""
      - ""
      - '# setup pip index server url'
      - 'mkdir -p ~/.pip/'
      - ""
      - 'cat <<EOT >> ~/.pip/pip.conf'
      - '[global]'
      - trusted-host=mirrors.aliyun.com
      - 'index-url=https://mirrors.aliyun.com/pypi/simple'
      - 'extra-index-url=https://pypi.tuna.tsinghua.edu.cn/simple'
      - EOT
      - ""
      - 'python3 -m pip install --upgrade pip && python3 -m pip install tox coverage'
      - ""
  coverage:
    env:
      setting: {}
      load: init-env
    type: unit_test
    exec:
      - '#!/usr/bin/env bash'
      - ""
      - 'set -ae'
      - 'set -o pipefail'
      - ""
      - ""
      - 'export SOURCE_DIR=${source_root}'
      - 'export BRANCH=${branch}'
      - 'export REPO=${repo}'
      - 'export BUILD_ID="${build_id}"'
      - 'export REVISION="${revision}"'
      - 'export MR_ID="${mrId}"'
      - ""
      - '# aone utils from pqtools'
      - 'source ../pqtools/aone_utils'
      - ""
      - ""
      - 'export BUILD_TIMESTAMP=$(expr ${created_at} / 1000)'
      - 'year_month_="$(date +%Y%m --date=@${BUILD_TIMESTAMP})"'
      - 'datetime_="$(date +%Y%m%d%H%M --date=@${BUILD_TIMESTAMP})"'
      - ""
      - 'oss_bucket="odps-release"'
      - 'oss_endpoint="cn-hangzhou.oss-cdn.aliyun-inc.com"'
      - 'oss_access_key_id="AccessKeyId"'
      - 'oss_access_key_secret="AccessKeySecret"'
      - 'OSS_CMD="ossutil --access-key-id=${oss_access_key_id} --access-key-secret=${oss_access_key_secret} --endpoint=${oss_endpoint}"'
      - ""
      - 'coverage_report_dir="/pai-python-sdk/tests/${datetime_}/${BUILD_ID}/"'
      - ""
      - 'oss_report_path="oss://${oss_bucket}${coverage_report_dir}"'
      - 'oss_report_url="https://${oss_bucket}.${oss_endpoint}${coverage_report_dir}index.html"'
      - ""
      - 'echo "OSS Report Path is ${oss_report_path}"'
      - 'echo "OSS Report URL is ${oss_report_url}"'
      - ""
      - 'coverage report'
      - 'coverage html'
      - ""
      - ""
      - '$OSS_CMD cp ./htmlcov $oss_report_path --recursive'
      - 'aone_print_text_info 1 "succeed" "Coverage Report" "${oss_report_url}"'
      - ""
  check:
    env:
      setting: {}
      load: init-env
    type: unit_test
    exec:
      - '#!/usr/bin/env bash'
      - ""
      - 'set -ae'
      - 'set -o pipefail'
      - ""
      - ""
      - 'export SOURCE_DIR=${source_root}'
      - 'export BRANCH=${branch}'
      - 'export REPO=${repo}'
      - ""
      - 'export SOURCE_DIR=${source_root}'
      - 'echo "current ''SOURCE_DIR'' is ${SOURCE_DIR}"'
      - ""
      - ""
      - 'cd ${SOURCE_DIR}'
      - ""
      - 'export TOX_PARALLEL_NO_SPINNER=1'
      - 'tox -e flake8'
      - 'tox -e black-check '
      - 'tox -e sphinx'
pipeline:
  - init-env
  - 'check,unit-test'
  - 'integ-test(public),integ-test(inner)'
  - coverage
